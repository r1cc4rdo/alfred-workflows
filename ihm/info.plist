<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>gherardi.riccardo.ihm</string>
	<key>category</key>
	<string>Internet</string>
	<key>connections</key>
	<dict>
		<key>24A950DA-1CD4-4053-9B0D-5035F23B08E8</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>BE9B9655-D529-4DE6-A8F7-7273940FBC47</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Riccardo Gherardi</string>
	<key>description</key>
	<string>Connect to IHM services</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>IHM</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>2</integer>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>ihm</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Filtering entries...</string>
				<key>script</key>
				<string>from collections import namedtuple
import hashlib
import json
import sys

stores = {
    'Beta': ['LAB05'],
    'Gamma': ['LAB54', 'LAB6'],
    'Prod': ['S1']}

services = {
    'RedRackham Tiler': {
        'Beta': 'ihmredrackham.integ.amazon.com/tiler/index.html#/{}',
        'Gamma': 'ihmredrackham-gamma-pdx.pdx.proxy.amazon.com/tiler/index.html#/{}',
        'Prod': 'ihmredrackham-pdx.pdx.proxy.amazon.com/tiler/index.html#/{}'},
    'RedRackham Explorer': {
        'Beta': 'ihmredrackham.integ.amazon.com/explorer/index.html',
        'Gamma': 'ihmredrackham-gamma-pdx.pdx.proxy.amazon.com/explorer/index.html',
        'Prod': 'ihmredrackham-pdx.pdx.proxy.amazon.com/explorer/index.html'},
    'Coulson': {
        'Beta': 'ihm-coulson-beta.integ.amazon.com/dashboard/store-health/{}/map',
        'Gamma': 'ihm-coulson-gamma.aka.amazon.com/dashboard/store-health/{}/map',
        'Prod': 'ihm-coulson.aka.amazon.com/dashboard/store-health/{}/map'},
    'Paulo': {
        'Beta': 'ihmpaulo.integ.amazon.com/stores/{}',
        'Gamma': 'ihmpaulo-gamma.amazon.com/stores/{}',
        'Prod': 'ihmpaulo-prod-pdx.pdx.proxy.amazon.com/stores/{}'},
    'Onix Planner': {
        'Beta': 'ihmpaulo.integ.amazon.com/onix/?domain=test&amp;storeId={}#/ci_planner',
        'Gamma': 'ihmpaulo-gamma.amazon.com/onix/?domain=gamma&amp;storeId={}#/ci_planner',
        'Prod': 'ihmpaulo-prod-pdx.pdx.proxy.amazon.com/onix/?domain=prod&amp;storeId={}#/ci_planner'},  # TODO
    'Onix Calibration Run': {
        'Beta': 'ihmpaulo.integ.amazon.com/onix/?domain=test&amp;storeId={}#/calibration_run',
        'Gamma': 'ihmpaulo-gamma.amazon.com/onix/?domain=gamma&amp;storeId={}#/calibration_run',
        'Prod': 'ihmpaulo-prod-pdx.pdx.proxy.amazon.com/onix/?domain=prod&amp;storeId={}#/calibration_run'},  # TODO
    'RedRackham Dashboard': {
        'Beta': 'w.amazon.com/index.php/IHM/RedRackham/Beta',
        'Gamma': 'w.amazon.com/index.php/IHM/RedRackham/Gamma',
        'Prod': 'w.amazon.com/index.php/IHM/RedRackham/Prod'},
    'RedRackham S3': {
        'Beta': 'access.amazon.com/aws/accounts/show/ihm-redrackham-dev',
        'Gamma': 'access.amazon.com/aws/accounts/show/ihm-redrackham-gamma',
        'Prod': 'access.amazon.com/aws/accounts/show/ihm-redrackham-prod'},
    'MoneyPenny': {'Prod': 'hilo.amazon.com/moneypenny/?domain=prod#/new-workflow'}}

entries = []
Entry = namedtuple('Entry', 'title url match')
for service_name in services:

    for stage in services[service_name]:

        url = services[service_name][stage]
        if '{}' in url:

            for store in stores[stage]:

                title = '{} {}'.format(service_name, store)
                match = ' '.join((service_name, stage, store)).lower()
                entries.append(Entry(title, url.format(store), match))

        else:  # endpoint is per stage, not store

            title = '{} {}'.format(service_name, stage)
            match = ' '.join([service_name, stage] + stores[stage]).lower()
            entries.append(Entry(title, url, match))

keywords = sys.argv[1].split()
print json.dumps({"items": [
    {
        "uid": hashlib.md5(entry.title).hexdigest(),
        "title": entry.title,
        "subtitle": entry.url,
        "arg": 'https://{}'.format(entry.url),
        "match": entry.match
    }
    for entry in filter(lambda e: all([k in e.match for k in keywords]), entries)]})</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Example: ihm dash gamma</string>
				<key>title</key>
				<string>Navigate to IHM services</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>24A950DA-1CD4-4053-9B0D-5035F23B08E8</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>browser</key>
				<string></string>
				<key>spaces</key>
				<string></string>
				<key>url</key>
				<string>{query}</string>
				<key>utf8</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.openurl</string>
			<key>uid</key>
			<string>BE9B9655-D529-4DE6-A8F7-7273940FBC47</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string></string>
	<key>uidata</key>
	<dict>
		<key>24A950DA-1CD4-4053-9B0D-5035F23B08E8</key>
		<dict>
			<key>xpos</key>
			<integer>40</integer>
			<key>ypos</key>
			<integer>30</integer>
		</dict>
		<key>BE9B9655-D529-4DE6-A8F7-7273940FBC47</key>
		<dict>
			<key>xpos</key>
			<integer>220</integer>
			<key>ypos</key>
			<integer>30</integer>
		</dict>
	</dict>
	<key>webaddress</key>
	<string>https://github.com/r1cc4rdo/alfred-workflows</string>
</dict>
</plist>
